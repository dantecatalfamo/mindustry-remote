* Mindustry Remote
  Control the Mindustry server console from your web browser.

  [[file:screenshot.jpg]]
** Requirements
   - [[https://anuke.itch.io/mindustry][Mindustry Server]]
   - [[https://github.com/joewalnes/websocketd][websocketd]]
   - =netcat=
   - =nginx= (optional)
** Variables
*** =remote.sh=
    - =MINDUSTRY_ADDRESS= The address that the Mindustry TCP server is
      listening on
    - =MINDUSTRY_PORT= The port that the Mindustry TCP server is listening on
    - =LISTEN_ADDRESS= The address that the websocket server will be
      bound to (default =127.0.0.1=)
    - =LISTEN_PORT= The port that the websocket server will be served
      on (default =8990=)
*** =html/remote.js=
    - =WEBSOCKET= The address of the websocket server
** Setup
   Once the Mindustry server is launched, enable =socketInput= with
   the following console command.

   #+begin_src
   config socketInput true
   #+end_src

   Then launch the websocket server using =remote.sh=.

   #+begin_src shell
   ./remote.sh
   #+end_src

   The script should connect to the Mindustry server on the default
   port, but if yours is configured differently, it should be easy to
   change using the variables at the top of the file.

   The websocket server will be listening on port =8990= on
   =localhost= by default.

   The assets in the =html= folder should be copied to a place where
   they can be accessed through a web server like =nginx=, and the
   variable at the top of =remote.js= should be modified to reflect
   the true location of the websocket server.

   At this point, the web console should be setup behind a reverse
   proxy like =nginx= using something like basic auth to keep
   strangers out.
** Limitations
   Because of the way the console server works in Mindustry, only one
   person can be connected to the web console at a time. If more than
   one person tries to connect at a time, the connection to the
   websocket server will fail.

   Depending on the configuration of your web server, the websocket
   may timeout and disconnect after a certain period of inactivity.
   In the case of =nginx=, this can be changed in the configuration
   file. I don't necessarily see this as a bad thing, as it stops you
   from accidentally leaving a browser tab open on a machine and
   walking away, locking anyone else out of the console. In case it
   disconnects, refreshing the page should fix the problem.

** Example nginx configuration
   Here's an example configuration file for =nginx=. The address of
   the example site is =example.com=, with the TLS certificates being
   managed through [[https://letsencrypt.org/][Let's Encrypt]]. In this example the files from the
   =html= folder of this project have been copied over into
   =/var/www/html/mindustry/=.

   The =remote.js= file would be edited to have the =WEBSOCKET=
   variable adjusted to the following.

   #+begin_src js
   const WEBSOCKET = 'wss://example.com/mindustry/ws';
   #+end_src

   The =nginx= config file is as follows.

   #+begin_src conf
   server {
       listen 443 ssl;
       ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;
       ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;
       include /etc/letsencrypt/options-ssl-nginx.conf;
       ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

       server_name example.com;

       root /var/www/html;
       index index.html;

       location / {
               try_files $uri $uri/ =404;
       }

       location /mindustry {
           auth_basic "Mindustry Remote";
           auth_basic_user_file /etc/nginx/htpasswd_mindustry;
       }

       location /mindustry/ws {
           proxy_pass http://localhost:8990;
           proxy_http_version 1.1;
           proxy_set_header Upgrade $http_upgrade;
           proxy_set_header Connection "Upgrade";
           proxy_set_header Host $host;
       }
   }

   server {
       listen 80;

       server_name example.com;

       location / {
           return 301 https://$host$request_uri;
       }
   }
   #+end_src
